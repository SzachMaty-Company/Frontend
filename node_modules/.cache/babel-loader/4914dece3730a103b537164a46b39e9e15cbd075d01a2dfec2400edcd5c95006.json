{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RetailAdmin\\\\Desktop\\\\Frontend\\\\src\\\\Components\\\\ChessBoard\\\\ChessBoard.tsx\",\n  _s = $RefreshSig$();\nimport './ChessBoard.css';\nimport React, { useState } from 'react';\nimport { Chess } from 'chess.js';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst col = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nconst reverseCol = {\n  \"a\": 0,\n  \"b\": 1,\n  \"c\": 2,\n  \"d\": 3,\n  \"e\": 4,\n  \"f\": 5,\n  \"g\": 6,\n  \"h\": 7\n};\n\n//Class for storing data from one cell in chess board\nexport class CellObject {\n  constructor(pos, piece) {\n    this.pos = void 0;\n    this.piece = void 0;\n    this.choosed = void 0;\n    this.available = void 0;\n    this.pos = pos;\n    this.piece = piece;\n    this.choosed = false;\n    this.available = false;\n  }\n}\nfunction makeChess(fenString) {\n  //Get pieces from fen string\n  const fenPieces = fenString.split(' ')[0].split('/').join(''); //Get the first portion //remove the row delimiters '/'\n  const pieces = Array.from(fenPieces);\n  let board = []; //Chess board\n  let versCounter = 1; //Verse counter\n  let counter = 0; //Column counter\n  let i = 0; //Iterator\n  while (i < pieces.length) {\n    let item = pieces[i];\n    let jump = parseInt(item); //if nober, how many spaces\n    //if item is not a number\n    if (Number.isNaN(jump)) {\n      let key = col[counter] + versCounter;\n      let cell = new CellObject(key, item);\n      board.push(cell);\n      counter++;\n    } else {\n      for (let j = 0; j < jump; j++) {\n        let key = col[counter] + versCounter;\n        let cell = new CellObject(key, \"_\"); //Not \" \", because css make cell not equal size\n        board.push(cell);\n        counter++;\n      }\n    }\n    //if verse ended\n    if (counter === 8) {\n      versCounter++;\n      counter = 0;\n    }\n    i++;\n  }\n  return board;\n}\n;\n\n//Coloring cells\nfunction colorCell(id) {\n  //if row is Even, move color scheme by one\n  if (Math.floor(id / 8) % 2 === 1) {\n    id++;\n  }\n  return id % 2 === 1 ? \"black\" : \"white\";\n}\n;\n\n//Calculate position of cell in table\nfunction reverseCellPosition(pos) {\n  return reverseCol[pos.charAt(0)] + (parseInt(pos.charAt(1)) - 1) * 8;\n}\nfunction ChessBoard() {\n  _s();\n  //Initialised component Chess\n  let [chess, setChess] = useState(new Chess());\n  //Cell table\n  let startChess = makeChess(chess.fen());\n  //Set Board\n  let [chessBoard, setChessBoard] = useState(startChess);\n  //Clicked cell\n  let [cellClicked, setCellClicked] = useState(\"\");\n  const cellOnClick = cell => {\n    /*if(cell.pos===cellClicked){\r\n      }else{\r\n        \r\n    }*/\n    //unclicked previous one\n    //ResetBoard\n    chessBoard.forEach(c => {\n      c.choosed = false;\n      c.available = false;\n    });\n    let currentPos = cell.pos;\n    let availableMoves = chess.moves({\n      square: currentPos\n    });\n    console.log(availableMoves);\n    if (availableMoves.length != 0) {\n      availableMoves.forEach(m => {\n        let move = m.slice(0, 1);\n        console.log(\"move -> \" + m);\n        chessBoard[reverseCellPosition(m)].available = true;\n      });\n    }\n    cell.choosed = true;\n    setCellClicked(cell.pos);\n    console.log(cell.pos);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: chessBoard.map((cell, id) => /*#__PURE__*/_jsxDEV(Cell, {\n      color: colorCell(id),\n      cell: cell,\n      callback: cellOnClick\n    }, cell.pos, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 12\n  }, this);\n}\n_s(ChessBoard, \"q8mUu9vVwM3z9hNDSEEnF5EjOm0=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","Chess","Cell","jsxDEV","_jsxDEV","col","reverseCol","CellObject","constructor","pos","piece","choosed","available","makeChess","fenString","fenPieces","split","join","pieces","Array","from","board","versCounter","counter","i","length","item","jump","parseInt","Number","isNaN","key","cell","push","j","colorCell","id","Math","floor","reverseCellPosition","charAt","ChessBoard","_s","chess","setChess","startChess","fen","chessBoard","setChessBoard","cellClicked","setCellClicked","cellOnClick","forEach","c","currentPos","availableMoves","moves","square","console","log","m","move","slice","className","children","map","color","callback","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/RetailAdmin/Desktop/Frontend/src/Components/ChessBoard/ChessBoard.tsx"],"sourcesContent":["import './ChessBoard.css';\r\nimport React, { useState } from 'react';\r\nimport {Chess}  from 'chess.js';\r\nimport { log } from 'console';\r\nimport Cell from './Cell';\r\n\r\nconst col=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"];\r\n\r\nconst reverseCol:{[key:string]:number}={\r\n    \"a\":0,\r\n    \"b\":1,\r\n    \"c\":2,\r\n    \"d\":3,\r\n    \"e\":4,\r\n    \"f\":5,\r\n    \"g\":6,\r\n    \"h\":7\r\n};\r\n\r\n//Class for storing data from one cell in chess board\r\nexport class CellObject {\r\n    pos: string;\r\n    piece: string;\r\n    choosed:boolean;\r\n    available:boolean;\r\n    constructor(pos:string, piece:string) {\r\n        this.pos = pos;\r\n        this.piece = piece;\r\n        this.choosed = false;\r\n        this.available = false;\r\n    }\r\n}\r\n\r\nfunction makeChess(fenString:string):CellObject[]{\r\n    //Get pieces from fen string\r\n    const fenPieces = fenString.split(' ')[0].split('/').join(''); //Get the first portion //remove the row delimiters '/'\r\n    const pieces=Array.from(fenPieces);\r\n    \r\n    let board:CellObject[] =[];   //Chess board\r\n    let versCounter=1;      //Verse counter\r\n    let counter:number=0;   //Column counter\r\n    let i=0;                //Iterator\r\n    while(i<pieces.length){\r\n        let item=pieces[i];\r\n        let jump=parseInt(item);    //if nober, how many spaces\r\n        //if item is not a number\r\n        if(Number.isNaN(jump)){\r\n            let key=col[counter]+versCounter;\r\n            let cell=new CellObject(key,item);\r\n            board.push(cell);\r\n            counter++;\r\n        }else{\r\n            for(let j=0;j<jump;j++){\r\n                let key=col[counter]+versCounter;\r\n                let cell=new CellObject(key,\"_\"); //Not \" \", because css make cell not equal size\r\n                board.push(cell);\r\n                counter++;\r\n            }\r\n        }\r\n        //if verse ended\r\n        if(counter===8){\r\n            versCounter++;\r\n            counter=0;\r\n        }\r\n        i++;\r\n    }\r\n    return board;\r\n};\r\n\r\n//Coloring cells\r\nfunction colorCell(id:number):string {\r\n    //if row is Even, move color scheme by one\r\n    if(Math.floor(id/8)%2===1){\r\n        id++;\r\n    }\r\n    return id%2===1?\"black\":\"white\";\r\n};\r\n\r\n//Calculate position of cell in table\r\nfunction reverseCellPosition(pos:string):number{\r\n    return reverseCol[pos.charAt(0)]+(parseInt(pos.charAt(1))-1)*8;\r\n}\r\n\r\nfunction ChessBoard()\r\n{\r\n    //Initialised component Chess\r\n    let [chess,setChess]=useState(new Chess());\r\n    //Cell table\r\n    let startChess=makeChess(chess.fen());\r\n    //Set Board\r\n    let [chessBoard,setChessBoard] = useState(startChess);\r\n    //Clicked cell\r\n    let [cellClicked,setCellClicked]=useState(\"\");\r\n\r\n    const cellOnClick = (cell:CellObject) =>{\r\n        /*if(cell.pos===cellClicked){\r\n\r\n        }else{\r\n            \r\n        }*/\r\n        //unclicked previous one\r\n        //ResetBoard\r\n        chessBoard.forEach((c)=>{\r\n            c.choosed=false;\r\n            c.available=false;\r\n        })\r\n        let currentPos:any=cell.pos;\r\n        let availableMoves=chess.moves({ square: currentPos });\r\n        console.log(availableMoves);\r\n        if(availableMoves.length!=0){\r\n            availableMoves.forEach((m)=>{\r\n                let move=m.slice(0,1);\r\n                console.log(\"move -> \"+m)\r\n                chessBoard[reverseCellPosition(m)].available=true;\r\n            })\r\n        }\r\n\r\n        cell.choosed=true;\r\n        setCellClicked(cell.pos);\r\n        console.log(cell.pos)\r\n        \r\n        \r\n    };\r\n\r\n    return <div className=\"board\">\r\n        {chessBoard.map((cell:CellObject,id:number) => (\r\n        <Cell key={cell.pos} color={colorCell(id)} cell={cell} callback={cellOnClick}></Cell>\r\n    ))}\r\n</div>;\r\n\r\n}\r\n\r\nexport default ChessBoard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}