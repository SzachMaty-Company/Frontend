{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RetailAdmin\\\\Desktop\\\\Frontend\\\\src\\\\Components\\\\ChessBoard\\\\ChessBoard.tsx\",\n  _s = $RefreshSig$();\nimport './ChessBoard.css';\nimport React, { useState } from 'react';\nimport { Chess } from 'chess.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst col = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nconst ver = [8, 7, 6, 5, 4, 3, 2, 1];\nfunction Cell({\n  color,\n  position,\n  piece\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: color,\n    children: piece\n  }, position, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 12\n  }, this);\n}\n\n//Class for storing data from one cell in chess board\n_c = Cell;\nclass CellObject {\n  constructor(pos, piece) {\n    this.pos = void 0;\n    this.piece = void 0;\n    this.pos = pos;\n    this.piece = piece;\n  }\n}\nfunction makeChess(fenString) {\n  //Get pieces from fen string\n  const fenPieces = fenString.split(' ')[0].split('/').join(''); //Get the first portion //remove the row delimiters '/'\n  const pieces = Array.from(fenPieces);\n  let board = []; //Chess board\n  let versCounter = 0; //Verse counter\n  let counter = 0; //Column counter\n  let i = 0; //Iterator\n  while (i < pieces.length) {\n    let item = pieces[i];\n    let jump = parseInt(item); //if nober, how many spaces\n    //if item is not a number\n    if (Number.isNaN(jump)) {\n      let key = col[counter] + ver[versCounter];\n      let cell = new CellObject(key, item);\n      board.push(cell);\n      counter++;\n    } else {\n      for (let j = 0; j < jump; j++) {\n        let key = col[counter] + ver[versCounter];\n        let cell = new CellObject(key, \"_\"); //Not \" \", because css make cell not equal size\n        board.push(cell);\n        counter++;\n      }\n    }\n    //if verse ended\n    if (counter === 8) {\n      versCounter++;\n      counter = 0;\n    }\n    i++;\n  }\n  return board;\n}\nfunction ChessBoard() {\n  _s();\n  //Initialised component Chess\n  let [chess, setChess] = useState(new Chess());\n  //Get FEN string\n  let startChess = makeChess(chess.fen());\n  //Set Board\n  let [chessBoard, setChessBoard] = useState(startChess);\n  //Painting cells\n  function colorCell(id) {\n    //if row is Even, move color scheme by one\n    if (Math.floor(id / 8) % 2 == 1) {\n      id++;\n    }\n    return id % 2 == 0 ? \"black\" : \"white\";\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: chessBoard.map((cell, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: colorCell(id),\n      children: cell.piece\n    }, cell.pos, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 12\n  }, this);\n}\n_s(ChessBoard, \"KkWyZXou2u8k4hm5zgRaEO712Ms=\");\n_c2 = ChessBoard;\nexport default ChessBoard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"ChessBoard\");","map":{"version":3,"names":["React","useState","Chess","jsxDEV","_jsxDEV","col","ver","Cell","color","position","piece","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CellObject","constructor","pos","makeChess","fenString","fenPieces","split","join","pieces","Array","from","board","versCounter","counter","i","length","item","jump","parseInt","Number","isNaN","key","cell","push","j","ChessBoard","_s","chess","setChess","startChess","fen","chessBoard","setChessBoard","colorCell","id","Math","floor","map","_c2","$RefreshReg$"],"sources":["C:/Users/RetailAdmin/Desktop/Frontend/src/Components/ChessBoard/ChessBoard.tsx"],"sourcesContent":["import './ChessBoard.css';\r\nimport React, { useState } from 'react';\r\nimport {Chess}  from 'chess.js';\r\nimport { log } from 'console';\r\n\r\nconst col=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"];\r\nconst ver=[8,7,6,5,4,3,2,1]\r\n\r\nfunction Cell({color,position,piece}:{color:string,position:string,piece:string}){\r\n    return <div className={color} key={position}>{piece}</div>\r\n}\r\n\r\n\r\n\r\n//Class for storing data from one cell in chess board\r\nclass CellObject {\r\n    pos: string;\r\n    piece: string;\r\n    constructor(pos:string, piece:string) {\r\n        this.pos = pos;\r\n        this.piece = piece;\r\n    }\r\n}\r\n\r\nfunction makeChess(fenString:string):CellObject[]{\r\n    //Get pieces from fen string\r\n    const fenPieces = fenString.split(' ')[0].split('/').join(''); //Get the first portion //remove the row delimiters '/'\r\n    const pieces=Array.from(fenPieces);\r\n    \r\n    let board:CellObject[] =[];   //Chess board\r\n    let versCounter=0;      //Verse counter\r\n    let counter:number=0;   //Column counter\r\n    let i=0;                //Iterator\r\n    while(i<pieces.length){\r\n        let item=pieces[i];\r\n        let jump=parseInt(item);    //if nober, how many spaces\r\n        //if item is not a number\r\n        if(Number.isNaN(jump)){\r\n            let key=col[counter]+ver[versCounter];\r\n            let cell=new CellObject(key,item);\r\n            board.push(cell);\r\n            counter++;\r\n        }else{\r\n            for(let j=0;j<jump;j++){\r\n                let key=col[counter]+ver[versCounter];\r\n                let cell=new CellObject(key,\"_\"); //Not \" \", because css make cell not equal size\r\n                board.push(cell);\r\n                counter++;\r\n            }\r\n        }\r\n        //if verse ended\r\n        if(counter===8){\r\n            versCounter++;\r\n            counter=0;\r\n        }\r\n        i++;\r\n    }\r\n    return board;\r\n}\r\n\r\nfunction ChessBoard()\r\n{\r\n    //Initialised component Chess\r\n    let [chess,setChess]=useState(new Chess());\r\n    //Get FEN string\r\n    let startChess=makeChess(chess.fen());\r\n    //Set Board\r\n    let [chessBoard,setChessBoard] = useState(startChess);\r\n    //Painting cells\r\n    function colorCell(id:number) {\r\n        //if row is Even, move color scheme by one\r\n        if(Math.floor(id/8)%2==1){\r\n            id++;\r\n        }\r\n        return id%2==0?\"black\":\"white\";\r\n    };\r\n\r\n    return <div className=\"board\">\r\n        {chessBoard.map((cell:CellObject,id:number) => (\r\n        <div className={colorCell(id)} key={cell.pos}>{cell.piece}</div>\r\n    ))}\r\n</div>;\r\n\r\n}\r\n\r\nexport default ChessBoard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}